{
    "collab_server" : "",
    "contents" : "#########################################################################################################\n## The script performed gene module meta-analysis on discovery cohorts to detect signiture gene\n## modules significantly defferent between high responders and low responders to flu vaccination\n## in HIPC signature project. The identifiedy gene modules were then verified by the validation cohort.\n#########################################################################################################\n##\n## Original Author: Hailong Meng\n## Updated last by Hailong: 2016-11-18\n## ? 2016 Yale University. All rights reserved.\n## Refactoring Author: Evan henrich (Fred Hutch), January 2017\n## Note: All locations of substantive edits are commented with \"EH NOTE:\"\n#########################################################################################################\n\n# EH NOTE:\n# Removed comments regarding directory structure and converted script into a function to allow\n# arguments of cohort, FDR.cutoff, pvalue.cutoff, and endPoint so that users may test\n# different possibilities\n\n#---------HELPER METHOD--------------------------------------------------\n# EH NOTE:\n# Abstracted this method since duplicated in validation and discovery\n\n## Combine by gene symbols and select probe with highest average gene expression\nrun_qs <- function(eset, gene_symbols, labels, validation, geneSetDB, markdown){\n\n  ## Combine by gene symbols and select probe with highest average gene expression\n  ## rank probesets by average expression\n  nodup.rank <- apply(eset, 1 , function(x){ sum(2^x) / length(x) })\n  nodup.genes <- gene_symbols\n\n  for (p in 1:dim(eset)[1]) {\n    dups <- which(nodup.genes[p] == nodup.genes)      \t\t\t##find the duplicate probesets\n    if (length(dups) > 1) {\n      # remove the 'best' probeset from the duplicated list and mark the duplicates with NA\n      nodup.genes[dups[-which.max(nodup.rank[dups])]] <- NA\n    }\n  }\n\n  ##remove the duplicated genes from results\n  eset.nodup <- eset[!is.na(nodup.genes),]\n  rownames(eset.nodup)  <- gene_symbols <- gene_symbols[!is.na(nodup.genes)]\n\n  if(validation){\n    eset.nodup.final <- eset.nodup\n    } # EH NOTE: only difference b/t discover and val\n\n  if(any(rownames(eset.nodup) == \"\")){\n    eset.nodup.final <- eset.nodup[-which(rownames(eset.nodup)==\"\"),]\n  }else{\n    eset.nodup.final <- eset.nodup # done for case of Yale studies with manifest annotation\n  }\n\n  if(any(is.na(labels))){\n    eset.nodup.final <- eset.nodup.final[,-which(is.na(labels))]\n    labels <-  labels[-which(is.na(labels))]\n  }\n\n  ## run gene module analysis. 2 is highResponder and 0 is lowResponder\n  if(markdown == F){\n    qs.results <-  qusage(eset.nodup.final, labels, \"2-0\", geneSetDB)\n  }else{\n    # send print statements to 'aux' connection to avoid in Markdown\n    sink(\"aux\")\n    qs.results <-  qusage(eset.nodup.final, labels, \"2-0\", geneSetDB)\n    sink(NULL)\n  }\n\n  return(qs.results)\n}\n\n\n#########################################################################################################\n## Discovery cohorts: SDY212, SDY63, SDY404, SDY400\n## Validation Cohorts: SDY80 (Young) and SDY67 (Older)\n#########################################################################################################\n#' Function to perform meta analysis for HIPC ImmuneSignatures Project\n#'\n#' @param geneSetDB table defining gene sets\n#' @param rds_data_dir Directory holding eset objects as rds files\n#' @param cohort Study cohort, young or old\n#' @param FDR.cutoff Cutoff for q-values in selecting significant gene sets\n#' @param pvalue.cutoff cutoff for p-values in selecting significant gene sets\n#' @param endPoint HAI table column used for categorizing response\n#' @param adjusted Use age-adjusted gene expression values, default = FALSE\n#' @param baselineOnly Use only day zero gene expression values, default = TRUE\n#' @param indiv_rds Output individual rds files for each discovery study, default = FALSE\n#' @param markdown Set output to go directly to screen for markdown files, default = FALSE\n#' @param output_dir Output directory\n#' @export\nmeta_analysis <- function(geneSetDB,\n                          rds_data_dir,\n                          cohort,\n                          FDR.cutoff = 0.5,\n                          pvalue.cutoff = 0.01,\n                          endPoint = 'fc_res_max_d30',\n                          adjusted = F,\n                          baselineOnly = T,\n                          indiv_rds = F,\n                          markdown = F,\n                          output_dir){\n\n  library(qusage) # load whole library b/c qusage::qusage() needs other functions\n  result_dfs <- list() # holds output tables for use with markdown\n\n  discoverySDY = c('SDY212','SDY63','SDY404','SDY400')\n  if(cohort == 'young'){\n    validation.sdy <- 'CHI-nih'\n  }else if(cohort == 'old'){\n    validation.sdy <- 'SDY67-batch2'\n  }else{\n    stop(\"The cohort name is not correct!\")\n  }\n\n  # Parse Gene Module\n  geneSetDB <- strsplit(geneSetDB,\"\\t\")            ##convert from vector of strings to a list\n  names(geneSetDB) <- sapply(geneSetDB,\"[\",1)      ##move the names column as the names of the list\n  links <- sapply(geneSetDB,\"[\",2)\n  geneSetDB <- lapply(geneSetDB, \"[\",-1:-2)        ##remove name and description columns\n  geneSetDB <- lapply(geneSetDB, function(x){x[which(x!=\"\")]})      ##remove empty strings\n\n\n  #########################################################################################################\n  ##\n  ## 2. Identify gene modules significantly different between high responders and low responders from\n  ## discovery cohorts\n  #########################################################################################################\n\n  quSageObjList <- list() ## save gene module analysis result for each SDY\n  index.sdy <- 0\n\n  for(sdy in discoverySDY){\n    index.sdy = index.sdy + 1\n    if(markdown == F){ print(paste0(\"Processing \", sdy, \" --- \")) }\n    dataset_name = paste(sdy, cohort, endPoint, sep=\"_\" )\n\n    eset <- getSDY(rds_data_dir = rds_data_dir,\n                   sdy = sdy,\n                   group = cohort,\n                   response = endPoint,\n                   adjusted = adjusted,\n                   baselineOnly = baselineOnly)\n\n    if(sdy =='SDY212' && cohort == 'young'){\n      ## two subjects from SDY212 has the same subject ID \"SUB134307\", but\n      ## Stanford don't know what happened to this\n      ## so, we removed those two entries in data analysis\n      if(markdown == F) {\n        print(\"Remove duplicated subject 'SUB134307' from SDY212 data analysis.  See Readme for more information.\")\n      }\n      SUB134307_index <-  which(pData(eset)['SubjectID'] == \"SUB134307\")\n      eset <- eset[,-SUB134307_index]\n    }\n\n    if(markdown == F){ print(summary(pData(eset)[c('Age.class', 'Response', 'Condition')])) }\n    gene_symbols  <- as.character(fData(eset)$geneSymbol)\n    labels <- as.character(pData(eset)[,endPoint])\n\n    ## save current gene module analysis for meta analysis later on\n    quSageObjList[[index.sdy]] <- run_qs(exprs(eset),\n                                         gene_symbols,\n                                         labels,\n                                         validation = F,\n                                         geneSetDB,\n                                         markdown)\n\n\n    # save R objects of gene module analysis for each SDY\n    if(indiv_rds){\n      rds.filename = paste0(output_dir, \"/\" , dataset_name, \".rds\")\n      saveRDS(qs.results, rds.filename)\n    }\n  }\n\n  ## gene module meta analysis\n  combinePDFsResult = combinePDFs(quSageObjList, n.points = 2^14)\n\n  ## p values for gene module meta analysis\n  combined.p = pdf.pVal(combinePDFsResult)\n  combined.q = p.adjust(combined.p, method=\"BH\")\n  index_sig <- intersect(which(combined.q < FDR.cutoff), which(combined.p < pvalue.cutoff))\n\n  ## get gene module activity\n  combined.PDF = combinePDFsResult$path.PDF\n  pathway.activity = c()\n  for (i in 1:length(combined.p)){\n    x.coordinates = getXcoords(combinePDFsResult,i)\n    tmp = x.coordinates[which(combined.PDF[,i] == max(combined.PDF[,i],na.rm=TRUE))]\n    pathway.activity=c(pathway.activity, tmp)\n  }\n\n  out_matrix <- cbind(Pvalue = combined.p,\n                      FDR = combined.q,\n                      pathwayActivity = pathway.activity)\n  rownames(out_matrix) = colnames(combinePDFsResult$path.PDF)\n\n  if(markdown == F){\n    ## output module meta-analysis results to the output folder\n    write.table(out_matrix,\n                file = paste0(output_dir, \"/metaGeneModuleAnalysis_DiscoveryCohort_\", cohort, \".txt\"),\n                quote = F,\n                sep = \"\\t\",\n                row.names = T,\n                col.names = NA)\n\n    ## output PDF figures for gene analysis results\n    pdf(paste0(output_dir, \"/significantModules_DiscoveryCohort_\", cohort, \".pdf\"),\n        width = 6,\n        height = 6)\n\n    for(i in index_sig){\n      plot(combinePDFsResult, path.index = i)\n      legend(\"topleft\", legend=c(discoverySDY,\"metaAnalysis\"),\n             lty=1, col=c(\"#E41A1C\",\"#377EB8\",\"#4DAF4A\",\"#984EA3\",\"black\"))\n      text(0.2, 1, paste(\"P value =\", format(combined.p[i], digits=2),sep=\"\"))\n    }\n\n    dev.off()\n\n  }else{\n    cat(paste0(\"DISCOVERY GROUP - SIGNIFICANT PATHWAY FIGURES\"))\n\n    result_dfs$dsc <- as.data.frame(out_matrix)\n\n    for(i in index_sig){\n      plot(combinePDFsResult, path.index = i)\n      legend(\"topleft\", legend=c(discoverySDY,\"metaAnalysis\"),\n             lty=1, col=c(\"#E41A1C\",\"#377EB8\",\"#4DAF4A\",\"#984EA3\",\"black\"))\n      text(0.2, 1, paste(\"P value =\", format(combined.p[i], digits=2),sep=\"\"))\n    }\n  }\n\n\n  #########################################################################################################\n  ##\n  ## 3. Validate significantly different gene modules between high responders and low responders\n  ##\n  #########################################################################################################\n\n\n  if(markdown == F){\n    print(paste0(\"Validate signature gene modules for \", cohort, \" cohort, study - \", validation.sdy))\n  }\n\n  dataset_name <- paste(validation.sdy, cohort , endPoint, sep = \"_\" )\n  eset <- getSDY(rds_data_dir = rds_data_dir,\n                 sdy = validation.sdy,\n                 group = ifelse(cohort == \"young\", 'all', cohort),\n                 response = endPoint,\n                 baselineOnly = TRUE)\n\n  if(cohort == 'young'){\n    # get young samples only\n    eset <- eset[, which(pData(eset)['Condition'] == 'd0' & pData(eset)['Age'] < 36)]\n    if(markdown == F){ print(summary(pData(eset)[c('Age.class', 'Response', 'Condition')])) }\n    labels <- as.character(pData(eset)[,endPoint])\n    gene_symbols <- rownames(eset) <- as.character(fData(eset)$geneSymbol)\n\n  }else{\n    if(markdown == F){ print(summary(pData(eset)[c('Age.class', 'Response', 'Condition')])) }\n    labels <- as.character(pData(eset)[,endPoint])\n    gene_symbols  <- as.character(fData(eset)$geneSymbol)\n    eset <- exprs(eset)\n  }\n\n  qs.results <- run_qs(eset, gene_symbols, labels, validation = T, geneSetDB, markdown)\n\n  pvalue <- pdf.pVal(qs.results)[index_sig]\n  qvalue <- p.adjust(pvalue, method = \"BH\")\n  pathway.activity.selected <- qs.results$path.mean[index_sig]\n\n  out_matrix <- cbind(pvalue, qvalue, pathway.activity.selected)\n  rownames(out_matrix) <- names(geneSetDB)[index_sig] # equal to selected.pathways\n\n  if(markdown == F){\n    write.table(out_matrix,\n                file = paste0(output_dir, \"/metaGeneModuleAnalysis_ValidationCohort_\", cohort, \".txt\"),\n                quote = F,\n                sep = \"\\t\",\n                row.names = T,\n                col.names = NA)\n\n    pdf(paste0(output_dir, \"/significantModules_ValidationCohort_\", cohort, \".pdf\"),\n        width = 6,\n        height = 6)\n\n    for(i in index_sig){\n      plot(qs.results,\n           path.index = i,\n           col = \"black\",\n           xlim = c(-1,1),\n           ylim = c(0,10),\n           xlab = \"Gene Module Activity\",\n           main = names(geneSetDB)[i]\n      )\n      text(0.2,\n           1,\n           paste(\"p value =\",\n                 round(pdf.pVal(qs.results)[i], digits = 3),\n                 sep = \" \"))\n      abline(v = 0, lty = 2)\n    }\n    dev.off()\n\n  }else{\n    cat(paste0(\"VALIDATION STUDY - SIGNFICANT PATHWAY FIGURES\"))\n\n    result_dfs$val <- as.data.frame(out_matrix)\n\n    # plot graphs\n    for(i in index_sig){\n      plot(qs.results,\n           path.index = i,\n           col = \"black\",\n           xlim = c(-1,1),\n           ylim = c(0,10),\n           xlab = \"Gene Module Activity\",\n           main = names(geneSetDB)[i]\n      )\n      text(0.2,\n           1,\n           paste(\"p value =\",\n                 round(pdf.pVal(qs.results)[i], digits = 3),\n                 sep = \" \"))\n      abline(v = 0, lty = 2)\n    }\n  }\n  return(result_dfs)\n}\n\n\n",
    "created" : 1491603401480.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1313830342",
    "id" : "A550CE0F",
    "lastKnownWriteTime" : 1488502719,
    "last_content_update" : 1488502719,
    "path" : "~/R/ImmSigPkg/R/HIPCMetaModuleAnalysis_v2_f.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 9,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}